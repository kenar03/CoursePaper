###############################################################################
#
# IAR ANSI C/C++ Compiler V9.30.1.335/W64 for ARM         01/May/2025  23:15:21
# Copyright 1999-2022 IAR Systems AB.
#
#    Cpu mode                     =  thumb
#    Endian                       =  little
#    Source file                  =
#        D:\Documents\Other\Homework\Kolodiy\CoursePaper\source\RtosWrapper\Tasks\UsartTask.cpp
#        [UTF-8]
#    Command line                 =
#        -f
#        D:\Documents\Other\Homework\Kolodiy\CoursePaper\source\RtosWrapper\Debug\Obj\Tasks\UsartTask.o.rsp
#        (D:\Documents\Other\Homework\Kolodiy\CoursePaper\source\RtosWrapper\Tasks\UsartTask.cpp
#        -lC
#        D:\Documents\Other\Homework\Kolodiy\CoursePaper\source\RtosWrapper\Debug\List\Tasks
#        -lA
#        D:\Documents\Other\Homework\Kolodiy\CoursePaper\source\RtosWrapper\Debug\List\Tasks
#        -o
#        D:\Documents\Other\Homework\Kolodiy\CoursePaper\source\RtosWrapper\Debug\Obj\Tasks
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config
#        D:\Games\Programs\IAR\arm\inc\c\DLib_Config_Normal.h -I
#        D:\Documents\Other\Homework\Kolodiy\CoursePaper\source\RtosWrapper\Rtos\
#        -I
#        D:\Documents\Other\Homework\Kolodiy\CoursePaper\source\RtosWrapper\Rtos\wrapper\
#        -I
#        D:\Documents\Other\Homework\Kolodiy\CoursePaper\source\RtosWrapper\Rtos\wrapper\FreeRtos\
#        -I
#        D:\Documents\Other\Homework\Kolodiy\CoursePaper\source\RtosWrapper\Rtos\FreeRtos\
#        -I
#        D:\Documents\Other\Homework\Kolodiy\CoursePaper\source\RtosWrapper\Rtos\FreeRtos\include\
#        -I
#        D:\Documents\Other\Homework\Kolodiy\CoursePaper\source\RtosWrapper\Rtos\FreeRtos\portable\
#        -I
#        D:\Documents\Other\Homework\Kolodiy\CoursePaper\source\RtosWrapper\Rtos\FreeRtos\portable\Common\
#        -I
#        D:\Documents\Other\Homework\Kolodiy\CoursePaper\source\RtosWrapper\Rtos\FreeRtos\portable\IAR\
#        -I
#        D:\Documents\Other\Homework\Kolodiy\CoursePaper\source\RtosWrapper\Rtos\FreeRtos\portable\IAR\ARM_CM4F\
#        -I
#        D:\Documents\Other\Homework\Kolodiy\CoursePaper\source\RtosWrapper\Rtos\FreeRtos\portable\MemMang\
#        -I
#        D:\Documents\Other\Homework\Kolodiy\CoursePaper\source\RtosWrapper\MyTasks\
#        -I
#        D:\Documents\Other\Homework\Kolodiy\CoursePaper\source\RtosWrapper\Common\
#        -I
#        D:\Documents\Other\Homework\Kolodiy\CoursePaper\source\RtosWrapper\CMSIS\
#        -I
#        D:\Documents\Other\Homework\Kolodiy\CoursePaper\source\RtosWrapper\Application\
#        -I
#        D:\Documents\Other\Homework\Kolodiy\CoursePaper\source\RtosWrapper\Application\Diagnostic\
#        -I
#        D:\Documents\Other\Homework\Kolodiy\CoursePaper\source\RtosWrapper\AHardware\
#        -I
#        D:\Documents\Other\Homework\Kolodiy\CoursePaper\source\RtosWrapper\AHardware\GpioPort\
#        -I
#        D:\Documents\Other\Homework\Kolodiy\CoursePaper\source\RtosWrapper\AHardware\IrqController\
#        -I
#        D:\Documents\Other\Homework\Kolodiy\CoursePaper\source\RtosWrapper\..\CortexLib\AbstractHardware\Pin\
#        -I
#        D:\Documents\Other\Homework\Kolodiy\CoursePaper\source\RtosWrapper\..\CortexLib\AbstractHardware\Registers\STM32F411\FieldValues\
#        -I
#        D:\Documents\Other\Homework\Kolodiy\CoursePaper\source\RtosWrapper\..\CortexLib\AbstractHardware\Registers\STM32F411\
#        -I
#        D:\Documents\Other\Homework\Kolodiy\CoursePaper\source\RtosWrapper\..\CortexLib\AbstractHardware\Registers\
#        -I
#        D:\Documents\Other\Homework\Kolodiy\CoursePaper\source\RtosWrapper\..\CortexLib\AbstractHardware\Port\
#        -I
#        D:\Documents\Other\Homework\Kolodiy\CoursePaper\source\RtosWrapper\..\CortexLib\AbstractHardware\Atomic\
#        -I
#        D:\Documents\Other\Homework\Kolodiy\CoursePaper\source\RtosWrapper\..\CortexLib\Common\
#        -I
#        D:\Documents\Other\Homework\Kolodiy\CoursePaper\source\RtosWrapper\..\CortexLib\Common\Singleton\
#        -I
#        D:\Documents\Other\Homework\Kolodiy\CoursePaper\source\RtosWrapper\..\CortexLib\Common\RomObject\
#        -I
#        D:\Documents\Other\Homework\Kolodiy\CoursePaper\source\RtosWrapper\Application\AdcDmaDataProvider\
#        -I
#        D:\Documents\Other\Homework\Kolodiy\CoursePaper\source\RtosWrapper\Application\AdcDmaDataProvider\Contracts\
#        -I
#        D:\Documents\Other\Homework\Kolodiy\CoursePaper\source\RtosWrapper\Application\DataRepository\
#        -I
#        D:\Documents\Other\Homework\Kolodiy\CoursePaper\source\RtosWrapper\Application\DataRepository\Contracts\
#        -I
#        D:\Documents\Other\Homework\Kolodiy\CoursePaper\source\RtosWrapper\Application\DigitalFilter\
#        -I
#        D:\Documents\Other\Homework\Kolodiy\CoursePaper\source\RtosWrapper\Application\DigitalFilter\Contracts\
#        -I
#        D:\Documents\Other\Homework\Kolodiy\CoursePaper\source\RtosWrapper\Application\Formatter\
#        -I
#        D:\Documents\Other\Homework\Kolodiy\CoursePaper\source\RtosWrapper\Application\Formatter\Contracts\
#        -I
#        D:\Documents\Other\Homework\Kolodiy\CoursePaper\source\RtosWrapper\Application\Leds\
#        -I
#        D:\Documents\Other\Homework\Kolodiy\CoursePaper\source\RtosWrapper\Application\Leds\Contracts\
#        -I
#        D:\Documents\Other\Homework\Kolodiy\CoursePaper\source\RtosWrapper\Application\Usart\
#        -I
#        D:\Documents\Other\Homework\Kolodiy\CoursePaper\source\RtosWrapper\Application\Usart\Contracts\
#        -I
#        D:\Documents\Other\Homework\Kolodiy\CoursePaper\source\RtosWrapper\Application\Voltage\
#        -I
#        D:\Documents\Other\Homework\Kolodiy\CoursePaper\source\RtosWrapper\Application\Voltage\Contracts\
#        -I
#        D:\Documents\Other\Homework\Kolodiy\CoursePaper\source\RtosWrapper\Tasks\
#        -I
#        D:\Documents\Other\Homework\Kolodiy\CoursePaper\source\RtosWrapper\Tasks\Contracts\
#        -I
#        D:\Documents\Other\Homework\Kolodiy\CoursePaper\source\RtosWrapper\..\CortexLib\AbstractHardware\Registers\CortexM4\
#        -I
#        D:\Documents\Other\Homework\Kolodiy\CoursePaper\source\RtosWrapper\..\CortexLib\AbstractHardware\Registers\CortexM4\FieldValues\
#        -On --c++ --no_exceptions --no_rtti --source_encoding utf8 --text_out
#        utf8 --utf8_text_in) --dependencies=n
#        D:\Documents\Other\Homework\Kolodiy\CoursePaper\source\RtosWrapper\Debug\Obj\Tasks\UsartTask.o.d
#    Locale                       =  C
#    List file                    =
#        D:\Documents\Other\Homework\Kolodiy\CoursePaper\source\RtosWrapper\Debug\List\Tasks\UsartTask.lst
#    Object file                  =
#        D:\Documents\Other\Homework\Kolodiy\CoursePaper\source\RtosWrapper\Debug\Obj\Tasks\UsartTask.o
#    Runtime model:                  
#      __CPP_Exceptions           =  Disabled
#      __CPP_Language             =  C++14
#      __CPP_Library              =  DLib
#      __CPP_Runtime              =  1
#      __SystemLibrary            =  DLib
#      __dlib_file_descriptor     =  0
#      __dlib_full_locale_support =  0
#      __dlib_version             =  6
#
###############################################################################

D:\Documents\Other\Homework\Kolodiy\CoursePaper\source\RtosWrapper\Tasks\UsartTask.cpp
      1          #include "UsartTask.hpp" // for UsartTask

   \                                 In section .text, align 2
   \   __vfp OsWrapper::TicksPerSecond std::chrono::duration_cast<OsWrapper::TicksPerSecond, __int64_t, std::milli>(std::chrono::duration<__int64_t, std::milli> const &)
   \                     _ZNSt6chrono13duration_castINS_8durationIjSt5ratioILx10ELx1000EEEExS2_ILx1ELx1000EEEENSt9enable_ifIXsr3std6chrono12_Is_durationIT_EE5valueES7_E4typeERKNS1_IT0_T1_EE: (+1)
   \        0x0   0xB51C             PUSH     {R2-R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x0020             MOVS     R0,R4
   \        0x6   0x.... 0x....      BL       _ZNKSt6chrono8durationIxSt5ratioILx1ELx1000EEE5countEv
   \        0xA   0x220A             MOVS     R2,#+10
   \        0xC   0x2300             MOVS     R3,#+0
   \        0xE   0x.... 0x....      BL       __aeabi_ldivmod
   \       0x12   0x9000             STR      R0,[SP, #+0]
   \       0x14   0x4669             MOV      R1,SP
   \       0x16   0xA801             ADD      R0,SP,#+4
   \       0x18   0x.... 0x....      BL       _ZNSt6chrono8durationIjSt5ratioILx10ELx1000EEEC1IjvEERKT_
   \       0x1C   0x9801             LDR      R0,[SP, #+4]
   \       0x1E   0xBD16             POP      {R1,R2,R4,PC}

   \                                 In section .text, align 2
   \   __vfp std::chrono::duration<uint32_t, std::ratio<10LL, 1'000LL>>::duration<uint32_t, void>(uint32_t const &)
   \                     _ZNSt6chrono8durationIjSt5ratioILx10ELx1000EEEC1IjvEERKT_: (+1)
   \        0x0   0x680A             LDR      R2,[R1, #+0]
   \        0x2   0x6002             STR      R2,[R0, #+0]
   \        0x4   0x4770             BX       LR

   \                                 In section .text, align 2
   \   __vfp __int64_t std::chrono::duration<__int64_t, std::milli>::count() const
   \                     _ZNKSt6chrono8durationIxSt5ratioILx1ELx1000EEE5countEv: (+1)
   \        0x0   0xE9D0 0x0100      LDRD     R0,R1,[R0, #+0]
   \        0x4   0x4770             BX       LR

   \                                 In section .text, align 2
   \   __vfp uint32_t std::chrono::duration<uint32_t, std::ratio<10LL, 1'000LL>>::count() const
   \                     _ZNKSt6chrono8durationIjSt5ratioILx10ELx1000EEE5countEv: (+1)
   \        0x0   0x6800             LDR      R0,[R0, #+0]
   \        0x2   0x4770             BX       LR

   \                                 In section .text, align 2
   \   __vfp void OsWrapper::RtosWrapper::wSleepUntil(uint32_t &, uint32_t)
   \                     _ZN9OsWrapper11RtosWrapper11wSleepUntilERjj: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
   \        0x6   0x0029             MOVS     R1,R5
   \        0x8   0x0020             MOVS     R0,R4
   \        0xA   0x.... 0x....      BL       vTaskDelayUntil
   \        0xE   0xBD31             POP      {R0,R4,R5,PC}

   \                                 In section .text, align 2
   \   __vfp OsWrapper::IThread::subobject IThread() noexcept
   \                     _ZN9OsWrapper7IThreadC2Ev: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x0020             MOVS     R0,R4
   \        0x6   0x.... 0x....      BL       _ZN9OsWrapper7IThreadC1Ev
   \        0xA   0xBD10             POP      {R4,PC}

   \                                 In section .text, align 2
   \   __vfp OsWrapper::IThread::IThread() noexcept
   \                     _ZN9OsWrapper7IThreadC1Ev: (+1)
   \        0x0   0x2100             MOVS     R1,#+0
   \        0x2   0x6541             STR      R1,[R0, #+84]
   \        0x4   0x2100             MOVS     R1,#+0
   \        0x6   0x6581             STR      R1,[R0, #+88]
   \        0x8   0x4770             BX       LR

   \                                 In section .text, align 2
   \   __vfp void OsWrapper::IThread::SleepUntil(std::chrono::milliseconds)
   \                     _ZN9OsWrapper7IThread10SleepUntilENSt6chrono8durationIxSt5ratioILx1ELx1000EEEE: (+1)
   \        0x0   0xB51F             PUSH     {R0-R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0xA802             ADD      R0,SP,#+8
   \        0x6   0x.... 0x....      BL       _ZNSt6chrono13duration_castINS_8durationIjSt5ratioILx10ELx1000EEEExS2_ILx1ELx1000EEEENSt9enable_ifIXsr3std6chrono12_Is_durationIT_EE5valueES7_E4typeERKNS1_IT0_T1_EE
   \        0xA   0x9000             STR      R0,[SP, #+0]
   \        0xC   0x4668             MOV      R0,SP
   \        0xE   0x.... 0x....      BL       _ZNKSt6chrono8durationIjSt5ratioILx10ELx1000EEE5countEv
   \       0x12   0x0001             MOVS     R1,R0
   \       0x14   0xF114 0x0058      ADDS     R0,R4,#+88
   \       0x18   0x.... 0x....      BL       _ZN9OsWrapper11RtosWrapper11wSleepUntilERjj
   \       0x1C   0xBD1F             POP      {R0-R4,PC}

   \                                 In section .text, align 2
   \   __vfp OsWrapper::Thread<512U>::subobject Thread() noexcept
   \                     _ZN9OsWrapper6ThreadILj512EEC2Ev: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x0020             MOVS     R0,R4
   \        0x6   0x.... 0x....      BL       _ZN9OsWrapper6ThreadILj512EEC1Ev
   \        0xA   0xBD10             POP      {R4,PC}

   \                                 In section .text, align 2
   \   __vfp OsWrapper::Thread<512U>::Thread() noexcept
   \                     _ZN9OsWrapper6ThreadILj512EEC1Ev: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x0020             MOVS     R0,R4
   \        0x6   0x.... 0x....      BL       _ZN9OsWrapper7IThreadC2Ev
   \        0xA   0x0020             MOVS     R0,R4
   \        0xC   0xBD10             POP      {R4,PC}
      2          

   \                                 In section .text, align 2, keep-with-next
   \   __vfp UsartTask::subobject UsartTask(IDataRepositoryProvider &, IUsart &, IFormatter &)
   \                     _ZN9UsartTaskC2ER23IDataRepositoryProviderR6IUsartR10IFormatter: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x0020             MOVS     R0,R4
   \        0x6   0x.... 0x....      BL       _ZN9UsartTaskC1ER23IDataRepositoryProviderR6IUsartR10IFormatter
   \        0xA   0xBD10             POP      {R4,PC}

   \                                 In section .text, align 2, keep-with-next
      3          UsartTask :: UsartTask(IDataRepositoryProvider& dataRepositoryProvider, IUsart& usart, IFormatter& formatter) :
      4            mDataRepositoryProvider(dataRepositoryProvider),
      5            mUsart(usart),
      6            mFormatter(formatter)
      7          {
   \                     _ZN9UsartTaskC1ER23IDataRepositoryProviderR6IUsartR10IFormatter: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
   \        0x6   0x0016             MOVS     R6,R2
   \        0x8   0x001F             MOVS     R7,R3
   \        0xA   0x0020             MOVS     R0,R4
   \        0xC   0x.... 0x....      BL       _ZN9OsWrapper6ThreadILj512EEC2Ev
   \       0x10   0x....             LDR.N    R0,??DataTable2_1
   \       0x12   0x6020             STR      R0,[R4, #+0]
   \       0x14   0xF8C4 0x685C      STR      R6,[R4, #+2140]
   \       0x18   0xF8C4 0x5860      STR      R5,[R4, #+2144]
   \       0x1C   0xF8C4 0x7864      STR      R7,[R4, #+2148]
      8          }
   \       0x20   0x0020             MOVS     R0,R4
   \       0x22   0xBDF2             POP      {R1,R4-R7,PC}
      9          

   \                                 In section .text, align 2, keep-with-next
     10          void UsartTask :: Execute()
     11          {
   \                     _ZN9UsartTask7ExecuteEv: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0xED2D 0x8B02      VPUSH    {D8}
   \        0x6   0x0004             MOVS     R4,R0
     12            for(;;)
     13            {
     14              const auto currVoltage = mDataRepositoryProvider.GetValue();
   \                     ??Execute_0: (+1)
   \        0x8   0xF8D4 0x0860      LDR      R0,[R4, #+2144]
   \        0xC   0xF8D4 0x1860      LDR      R1,[R4, #+2144]
   \       0x10   0x6809             LDR      R1,[R1, #+0]
   \       0x12   0x6809             LDR      R1,[R1, #+0]
   \       0x14   0x4788             BLX      R1
   \       0x16   0xEEF0 0x8A40      VMOV.F32 S17,S0
     15              const auto currFilteredVoltage = mDataRepositoryProvider.GetFilteredValue();
   \       0x1A   0xF8D4 0x0860      LDR      R0,[R4, #+2144]
   \       0x1E   0xF8D4 0x1860      LDR      R1,[R4, #+2144]
   \       0x22   0x6809             LDR      R1,[R1, #+0]
   \       0x24   0x6849             LDR      R1,[R1, #+4]
   \       0x26   0x4788             BLX      R1
   \       0x28   0xEEB0 0x8A40      VMOV.F32 S16,S0
     16              const auto voltageString = mFormatter.FormatString(currVoltage, 3U, " В", false);
   \       0x2C   0x....             ADR.N    R5,??DataTable2
   \       0x2E   0x2300             MOVS     R3,#+0
   \       0x30   0x002A             MOVS     R2,R5
   \       0x32   0x2103             MOVS     R1,#+3
   \       0x34   0xEEB0 0x0A68      VMOV.F32 S0,S17
   \       0x38   0xF8D4 0x0864      LDR      R0,[R4, #+2148]
   \       0x3C   0xF8D4 0x6864      LDR      R6,[R4, #+2148]
   \       0x40   0x6836             LDR      R6,[R6, #+0]
   \       0x42   0x6836             LDR      R6,[R6, #+0]
   \       0x44   0x47B0             BLX      R6
   \       0x46   0x0006             MOVS     R6,R0
     17              mUsart.SendMessage(voltageString);
   \       0x48   0x0031             MOVS     R1,R6
   \       0x4A   0xF8D4 0x085C      LDR      R0,[R4, #+2140]
   \       0x4E   0xF8D4 0x285C      LDR      R2,[R4, #+2140]
   \       0x52   0x6812             LDR      R2,[R2, #+0]
   \       0x54   0x6812             LDR      R2,[R2, #+0]
   \       0x56   0x4790             BLX      R2
     18              while(mUsart.IsBusy())
   \                     ??Execute_1: (+1)
   \       0x58   0xF8D4 0x085C      LDR      R0,[R4, #+2140]
   \       0x5C   0xF8D4 0x185C      LDR      R1,[R4, #+2140]
   \       0x60   0x6809             LDR      R1,[R1, #+0]
   \       0x62   0x6849             LDR      R1,[R1, #+4]
   \       0x64   0x4788             BLX      R1
   \       0x66   0x2800             CMP      R0,#+0
   \       0x68   0xD006             BEQ.N    ??Execute_2
   \       0x6A   0x....             LDR.N    R0,??DataTable2_2
   \       0x6C   0xE9D0 0x2300      LDRD     R2,R3,[R0, #+0]
     19              {
     20                SleepUntil(1ms);
   \       0x70   0x0020             MOVS     R0,R4
   \       0x72   0x.... 0x....      BL       _ZN9OsWrapper7IThread10SleepUntilENSt6chrono8durationIxSt5ratioILx1ELx1000EEEE
   \       0x76   0xE7EF             B.N      ??Execute_1
     21              }
     22              const auto filteredVoltageString = mFormatter.FormatString(currFilteredVoltage, 3U, " В", true);
   \                     ??Execute_2: (+1)
   \       0x78   0x2301             MOVS     R3,#+1
   \       0x7A   0x002A             MOVS     R2,R5
   \       0x7C   0x2103             MOVS     R1,#+3
   \       0x7E   0xEEB0 0x0A48      VMOV.F32 S0,S16
   \       0x82   0xF8D4 0x0864      LDR      R0,[R4, #+2148]
   \       0x86   0xF8D4 0x5864      LDR      R5,[R4, #+2148]
   \       0x8A   0x682D             LDR      R5,[R5, #+0]
   \       0x8C   0x682D             LDR      R5,[R5, #+0]
   \       0x8E   0x47A8             BLX      R5
   \       0x90   0x0005             MOVS     R5,R0
     23              mUsart.SendMessage(filteredVoltageString);
   \       0x92   0x0029             MOVS     R1,R5
   \       0x94   0xF8D4 0x085C      LDR      R0,[R4, #+2140]
   \       0x98   0xF8D4 0x285C      LDR      R2,[R4, #+2140]
   \       0x9C   0x6812             LDR      R2,[R2, #+0]
   \       0x9E   0x6812             LDR      R2,[R2, #+0]
   \       0xA0   0x4790             BLX      R2
   \       0xA2   0x....             LDR.N    R0,??DataTable2_3
   \       0xA4   0xE9D0 0x2300      LDRD     R2,R3,[R0, #+0]
     24              SleepUntil(500ms);
   \       0xA8   0x0020             MOVS     R0,R4
   \       0xAA   0x.... 0x....      BL       _ZN9OsWrapper7IThread10SleepUntilENSt6chrono8durationIxSt5ratioILx1ELx1000EEEE
   \       0xAE   0xE7AB             B.N      ??Execute_0
     25            }
     26          };

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \        0x0   0x20 0xD0          DC8      " \320\222"    

   \              0x92 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \        0x0   0x....'....        DC32     _ZTV9UsartTask+0x8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \        0x0   0x....'....        DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \        0x0   0x....'....        DC32     ?_2

   \                                 In section .rodata, align 4
   \        0x0   0x20 0xD0          DC8 " \320\222"

   \              0x92 0x00

   \                                 In section .rodata, align 8
   \                     ?_1:
   \        0x0   0x0000'0000'0      DC64 1

   \              000'0001

   \                                 In section .rodata, align 8
   \                     ?_2:
   \        0x0   0x0000'0000'0      DC64 500

   \              000'01F4

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   OsWrapper::IThread::IThread() noexcept
      24   OsWrapper::IThread::SleepUntil(std::chrono::milliseconds)
        24   -> OsWrapper::RtosWrapper::wSleepUntil(uint32_t &, uint32_t)
        24   -> std::chrono::duration<uint32_t, std::ratio<10LL, 1'000LL>>::count() const
        24   -> std::chrono::duration_cast<OsWrapper::TicksPerSecond, __int64_t, std::milli>(std::chrono::duration<__int64_t, std::milli> const &)
       8   OsWrapper::IThread::subobject IThread() noexcept
         8   -> OsWrapper::IThread::IThread() noexcept
      16   OsWrapper::RtosWrapper::wSleepUntil(uint32_t &, uint32_t)
        16   -> vTaskDelayUntil
       8   OsWrapper::Thread<512U>::Thread() noexcept
         8   -> OsWrapper::IThread::subobject IThread() noexcept
       8   OsWrapper::Thread<512U>::subobject Thread() noexcept
         8   -> OsWrapper::Thread<512U>::Thread() noexcept
      24   UsartTask::Execute()
        24   -- Indirect call
        24   -> OsWrapper::IThread::SleepUntil(std::chrono::milliseconds)
      24   UsartTask::UsartTask(IDataRepositoryProvider &, IUsart &, IFormatter &)
        24   -> OsWrapper::Thread<512U>::subobject Thread() noexcept
       8   UsartTask::subobject UsartTask(IDataRepositoryProvider &, IUsart &, IFormatter &)
         8   -> UsartTask::UsartTask(IDataRepositoryProvider &, IUsart &, IFormatter &)
       0   std::chrono::duration<__int64_t, std::milli>::count() const
       0   std::chrono::duration<uint32_t, std::ratio<10LL, 1'000LL>>::count() const
       0   std::chrono::duration<uint32_t, std::ratio<10LL, 1'000LL>>::duration<uint32_t, void>(uint32_t const &)
      16   std::chrono::duration_cast<OsWrapper::TicksPerSecond, __int64_t, std::milli>(std::chrono::duration<__int64_t, std::milli> const &)
        16   -> std::chrono::duration<__int64_t, std::milli>::count() const
        16   -> std::chrono::duration<uint32_t, std::ratio<10LL, 1'000LL>>::duration<uint32_t, void>(uint32_t const &)
        16 __aeabi_ldivmod


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ?_0
       8  ?_1
       8  ?_2
      10  OsWrapper::IThread::IThread() noexcept
      30  OsWrapper::IThread::SleepUntil(std::chrono::milliseconds)
      12  OsWrapper::IThread::subobject IThread() noexcept
      16  OsWrapper::RtosWrapper::wSleepUntil(uint32_t &, uint32_t)
      14  OsWrapper::Thread<512U>::Thread() noexcept
      12  OsWrapper::Thread<512U>::subobject Thread() noexcept
     176  UsartTask::Execute()
      36  UsartTask::UsartTask(IDataRepositoryProvider &, IUsart &, IFormatter &)
      12  UsartTask::subobject UsartTask(IDataRepositoryProvider &, IUsart &, IFormatter &)
       6  std::chrono::duration<__int64_t, std::milli>::count() const
       4  std::chrono::duration<uint32_t, std::ratio<10LL, 1'000LL>>::count() const
       6  std::chrono::duration<uint32_t, std::ratio<10LL, 1'000LL>>::duration<uint32_t, void>(uint32_t const &)
      32  std::chrono::duration_cast<OsWrapper::TicksPerSecond, __int64_t, std::milli>(std::chrono::duration<__int64_t, std::milli> const &)
     208  -- Other

 
 228 bytes in section .rodata
 382 bytes in section .text
 
 240 bytes of CODE  memory (+ 142 bytes shared)
  20 bytes of CONST memory (+ 208 bytes shared)

Errors: none
Warnings: none
